{"version":3,"file":"static/js/501.2f633c8c.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.addChain(this.chainConfig as CustomChainConfig, true);\n        await this.switchChain(this.chainConfig as CustomChainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        // ready to be connected again\n        this.disconnect();\n        this.provider?.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: params.chainId }],\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","BaseEvmAdapter","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","provider","status","ADAPTER_STATUS","WalletLoginError","chainId","chainNamespace","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","params","signedMessage","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","clearToken","rehydrated","emit","ADAPTER_EVENTS","BaseAdapter","MetamaskAdapter","constructor","_defineProperty","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","options","detectEthereumProvider","WalletInitializationError","log","autoConnect","connect","adapter","addChain","switchChain","disconnectHandler","disconnect","_this$provider","removeListener","on","reconnected","Web3AuthError","cleanup","_this$provider2","removeAllListeners","init","_this$metamaskProvide","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","decimals","addChainConfig","_this$metamaskProvide2","setAdapterSettings"],"sourceRoot":""}