{"version":3,"file":"static/js/912.2696091a.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.phantomProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.phantomProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","provider","status","ADAPTER_STATUS","WalletLoginError","chainId","chainNamespace","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","params","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","clearToken","rehydrated","emit","ADAPTER_EVENTS","BaseAdapter","poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","options","solana","_window$solana","isPhantom","_window$solana2","PhantomAdapter","constructor","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","_wallet","off","_onDisconnect","_this$_wallet","isConnected","phantomProvider","_this$phantomProvider","Error","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","_this","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","args","apply","reason","error","Web3AuthError","publicKey","on","cleanup","_this$_wallet2","disconnect","isWalletConnected","init","_this$phantomProvider2","addChain","addChainConfig","_this$phantomProvider3","switchChain","setAdapterSettings","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}