{"version":3,"file":"static/js/703.c3a2ff70.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/createClass.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/inherits.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/helpers/typeof.js","../node_modules/rpc-websockets/node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":[null,"export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{ chainId: params.chainId }],\n    });\n  }\n\n  public async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","Error","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","layout","UInt","UIntBE","decode","encode","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","makeDestinationObject","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bytes","lengths","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","u32","globalThis","crypto","arr","Uint32Array","byteLength","createView","DataView","rotr","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","padOffset","isLE","pos","view","len","take","set","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","destroy","to","U32_MASK64","fromBig","le","u64","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","map","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_0n","_1n","_2n","_8n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","p","base","window","affinePoint","equals","BASE","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","is0","invert","ax","ay","zz","legacyRist","toInv","nums","inverted","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","condition","item","neg","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_x","_y","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","privateKey","getExtendedPublicKey","point","Signature","assertValidity","u8","fromHex","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","_sha512Sync","MAX_255B","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","_setWindowSize","node","nodeCrypto","web","self","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","cached","sha512Sync","defineProperties","configurable","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","SHA224","sha256","toFailures","StructError","failure","failures","rest","path","join","isIterable","isObject","Symbol","iterator","print","JSON","stringify","shiftIterator","input","next","done","toFailure","context","struct","branch","type","refinement","run","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","props","validate","is","tuples","tuple","error","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","keys","Structs","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","keccak","finish","bufferOut","writeInto","xofInto","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","_3n","beta","divNearest","endo","a1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","hasEvenY","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","normalizeSignature","truncateHash","radj","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toDERRawBytes","toCompactHex","hexToNumber","rBytesLeft","parseDERSignature","fromDER","_sha256Sync","_hmacSha256Sync","numTo32b","bits2int_2","delta","truncateOnly","HmacDrbg","qByteLen","counter","hmacSha256","seed","checkSync","hmacSync","incr","sl","kmdToSig","kBytes","lowS","kinv","normalizeS","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","forEach","importKey","ckey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","charCodeAt","tagH","taggedHashSync","_JacobianPoint","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","Buffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","toStringTag","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","field","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","writableSigners","filter","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","compile","payerKey","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","version","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","messageData","signerPubkeys","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","status","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","all","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","code","fetch","RpcWebSocketClient","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","RpcWebSocketCommonClient","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify","unsafeRes","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","fetchImpl","info","init","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","race","outcome","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutMs","timeoutId","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","lockedWritableAccounts","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","transactionDetails","extra","block","endSlot","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","logTrace","traceIndent","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","recentSlot","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","_ref","createAsyncMiddleware","createRequestAccountsMiddleware","requestAccounts","_ref2","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","chainConfig","chainNamespace","CHAIN_NAMESPACES","WalletLoginError","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","BaseProvider","getBaseProviderHandlers","ethErrors","display","sigData","_req$params","_req$params2","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","getSlopeHandlers","getProviderEngineProxy","txMessage","conn","allTxns","unsignedTx","_data$signatures","SolflareInjectedProvider","getSolflareHandlers","solflareProviderHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","configure","setupProvider","keyPairGenerator","keyPair","signedMsg","nacl","_providerEngineProxy","txns","_req$params6","tx","SolanaPrivateKeyProvider","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","addChain","switchSolanaChain","switchChain","_ref3","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","updateAccount","_ref4","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","signedTransaction","signedTransactions","_Buffer","require","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","o","enumerable","__setModuleDefault","__decorate","decorators","target","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","_this2","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","ArrayBuffer","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","toLowerCase","rnds","random","ReferenceError","asyncGeneratorStep","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_regeneratorRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","_sent","dispatchException","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","awrap","async","iter","object","pop","skipTempReset","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","_setPrototypeOf","hint","prim","toPrimitive","runtime","regeneratorRuntime","accidentalStrictMode","Function","inRange","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys"],"sourceRoot":""}